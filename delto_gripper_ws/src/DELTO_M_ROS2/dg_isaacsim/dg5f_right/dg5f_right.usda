#usda 1.0
(
    defaultPrim = "dg5f_right"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "dg5f_right" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    variants = {
        string Physics = "PhysX"
        string Sensor = "Sensors"
    }
    prepend variantSets = ["Physics", "Sensor"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def OmniGraph "ActionGraph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "ros2_subscribe_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </dg5f_right/ActionGraph/ros2_context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </dg5f_right/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "ros2_publish_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </dg5f_right/ActionGraph/ros2_context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </dg5f_right/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </dg5f_right> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </dg5f_right/ActionGraph/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishJointState"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </dg5f_right/ActionGraph/ros2_subscribe_joint_state.outputs:effortCommand>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </dg5f_right/ActionGraph/ros2_subscribe_joint_state.outputs:execOut>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </dg5f_right/ActionGraph/ros2_subscribe_joint_state.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </dg5f_right/ActionGraph/ros2_subscribe_joint_state.outputs:positionCommand>
            custom string inputs:robotPath
            custom rel inputs:targetPrim = </dg5f_right> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </dg5f_right/ActionGraph/ros2_subscribe_joint_state.outputs:velocityCommand>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
        }

        def OmniGraphNode "ros2_publish_transform_tree" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </dg5f_right/ActionGraph/ros2_context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            custom string inputs:nodeNamespace
            custom rel inputs:parentPrim (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </dg5f_right> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </dg5f_right/ActionGraph/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
        }
    }

    over "rl_dg_mount"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_1_1"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_1_2"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_1_3"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_1_4"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_2_1"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_2_2"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_2_3"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_2_4"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_3_1"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_3_2"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_3_3"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_3_4"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_4_1"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_4_2"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_4_3"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_4_4"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_5_1"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_5_2"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_5_3"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "rl_dg_5_4"
    {
        rel physics:simulationOwner

        over "collisions"
        {
            rel physics:simulationOwner
        }
    }

    over "joints"
    {
        over "rj_dg_1_1"
        {
            float drive:angular:physics:targetPosition = 26.2
            float physics:lowerLimit = -21.999998
            float physics:upperLimit = 77
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_2_1"
        {
            float drive:angular:physics:targetPosition = -15.400001
            float physics:lowerLimit = -19.999998
            float physics:upperLimit = 30.999996
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_3_1"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_4_1"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_5_1"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_1_2"
        {
            float physics:lowerLimit = -154.99998
            float physics:upperLimit = 0
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_2_2"
        {
            float physics:lowerLimit = -0
            float physics:upperLimit = 115
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_3_2"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_4_2"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_5_2"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_1_3"
        {
            float physics:lowerLimit = -90
            float physics:upperLimit = 90
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_2_3"
        {
            float physics:lowerLimit = -90
            float physics:upperLimit = 90
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_3_3"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_4_3"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_5_3"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_1_4"
        {
            float physics:lowerLimit = -90
            float physics:upperLimit = 90
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_2_4"
        {
            float physics:lowerLimit = -90
            float physics:upperLimit = 90
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_3_4"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_4_4"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }

        over "rj_dg_5_4"
        {
            float state:angular:physics:position = 0
            float state:angular:physics:velocity = 0
        }
    }

    over "root_joint" (
        delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    )
    {
    }
    variantSet "Physics" = {
        "None" (
            prepend references = @configuration/dg5f_right_base.usd@
        ) {
            over "joints" (
                active = false
            )
            {
            }

        }
        "PhysX" (
            prepend payload = @configuration/dg5f_right_physics.usd@
        ) {

        }
    }
    variantSet "Sensor" = {
        "None" {

        }
        "Sensors" (
            prepend payload = @configuration/dg5f_right_sensor.usd@
        ) {

        }
    }
}

