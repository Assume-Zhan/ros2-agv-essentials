#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (5, 5, 5)
                double3 target = (-3.978038431995401e-8, -3.978038254359717e-8, 7.956076863990802e-8)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./go2_og.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def "warehouse" (
        prepend payload = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Simple_Warehouse/warehouse.usd@
    )
    {
    }

    def "go2" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        prepend payload = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Robots/Unitree/Go2/go2.usd@
    )
    {
        bool physxArticulation:enabledSelfCollisions = 0
        int physxArticulation:solverVelocityIterationCount = 16
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.35)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "base" (
            delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        )
        {
            over "FL_hip_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "FR_hip_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "RL_hip_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "RR_hip_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "FL_hip"
        {
            over "FL_thigh_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "FL_hip_protector"
        {
        }

        over "FL_thigh"
        {
            over "FL_calf_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "FL_calf"
        {
        }

        over "FL_calflower"
        {
        }

        over "FL_calflower1"
        {
        }

        over "FL_foot"
        {
        }

        over "FL_thigh_protector"
        {
        }

        over "FR_hip"
        {
            over "FR_thigh_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "FR_hip_protector"
        {
        }

        over "FR_thigh"
        {
            over "FR_calf_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "FR_calf"
        {
        }

        over "FR_calflower"
        {
        }

        over "FR_calflower1"
        {
        }

        over "FR_foot"
        {
        }

        over "FR_thigh_protector"
        {
        }

        over "Head_upper"
        {
        }

        over "Head_lower"
        {
        }

        over "RL_hip"
        {
            over "RL_thigh_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "RL_hip_protector"
        {
        }

        over "RL_thigh"
        {
            over "RL_calf_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "RL_calf"
        {
        }

        over "RL_calflower"
        {
        }

        over "RL_calflower1"
        {
        }

        over "RL_foot"
        {
        }

        over "RL_thigh_protector"
        {
        }

        over "RR_hip"
        {
            over "RR_thigh_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "RR_hip_protector"
        {
        }

        over "RR_thigh"
        {
            over "RR_calf_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "RR_calf"
        {
        }

        over "RR_calflower"
        {
        }

        over "RR_calflower1"
        {
        }

        over "RR_foot"
        {
        }

        over "RR_thigh_protector"
        {
        }

        over "base_black"
        {
        }

        over "base_white"
        {
        }

        over "imu"
        {
        }

        over "radar"
        {
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def "Graph"
{
    def OmniGraph "ROS_JointStates"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "PublisherJointState"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_JointStates/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_JointStates/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </World/go2> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_JointStates/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/joint_states"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishJointState"
            int node:typeVersion = 1
        }

        def OmniGraphNode "SubscriberJointState"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_JointStates/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_JointStates/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName = "/joint_command"
            token node:type = "isaacsim.ros2.bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
        }

        def OmniGraphNode "ArticulationController"
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </Graph/ROS_JointStates/SubscriberJointState.outputs:effortCommand>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_JointStates/OnPlaybackTick.outputs:tick>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </Graph/ROS_JointStates/SubscriberJointState.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </Graph/ROS_JointStates/SubscriberJointState.outputs:positionCommand>
            custom string inputs:robotPath
            custom rel inputs:targetPrim = </World/go2> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </Graph/ROS_JointStates/SubscriberJointState.outputs:velocityCommand>
            token node:type = "isaacsim.core.nodes.IsaacArticulationController"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_Clock"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "PublishClock"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Clock/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Clock/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Clock/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2PublishClock"
            int node:typeVersion = 1
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }
    }

    def OmniGraph "ROS_TF"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "PublisherTF"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_TF/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_TF/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom rel inputs:parentPrim (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/go2> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_TF/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_Odometry"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "TFWorld2Odom"
        {
            custom string inputs:childFrameId = "odom"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId = "world"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFOdom2Robot"
        {
            custom string inputs:childFrameId = ""
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            prepend quatd inputs:rotation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            prepend vector3d inputs:translation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "ComputeOdometry"
        {
            custom rel inputs:chassisPrim = </World/go2> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            token node:type = "isaacsim.core.nodes.IsaacComputeOdometry"
            int node:typeVersion = 1
            custom vector3d outputs:angularAcceleration
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearAcceleration
            custom vector3d outputs:linearVelocity
            custom quatd outputs:orientation
            custom vector3d outputs:position
        }

        def OmniGraphNode "PublisherOdometry"
        {
            custom vector3d inputs:angularVelocity
            prepend vector3d inputs:angularVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:angularVelocity>
            custom string inputs:chassisFrameId = ""
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:execOut>
            custom vector3d inputs:linearVelocity
            prepend vector3d inputs:linearVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:linearVelocity>
            custom string inputs:nodeNamespace = ""
            custom string inputs:odomFrameId
            custom quatd inputs:orientation
            prepend quatd inputs:orientation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom vector3d inputs:position
            prepend vector3d inputs:position.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom vector3d inputs:robotFront
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/odom"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishOdometry"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFRobot"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom rel inputs:parentPrim (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/go2> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }
}

